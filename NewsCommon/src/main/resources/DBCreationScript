CREATE TABLE Article (id INT PRIMARY KEY NOT NULL,
main_title VARCHAR(50) NOT NULL,
short_title VARCHAR(230), content CLOB,
publish_date TIMESTAMP NOT NULL, main_photo VARCHAR(100) NOT NULL);

CREATE TABLE Author (id INT PRIMARY KEY NOT NULL,
first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL,
is_working VARCHAR2(1) DEFAULT 'Y', CHECK(is_working in ('Y','N')));

CREATE TABLE Tag (id INT PRIMARY KEY NOT NULL, name VARCHAR(50) UNIQUE);

CREATE TABLE Role (id INT PRIMARY KEY NOT NULL, role_name VARCHAR2(30) UNIQUE);

CREATE TABLE Account (id INT PRIMARY KEY NOT NULL, username VARCHAR(50) UNIQUE NOT NULL,
password INT NOT NULL, role_id INT NOT NULL, FOREIGN KEY(role_id) REFERENCES Role(id));

CREATE TABLE Comments (id INT PRIMARY KEY NOT NULL, article_id INT NOT NULL, account_id INT NOT NULL,
publish_date TIMESTAMP NOT NULL, content VARCHAR2(500), FOREIGN KEY (article_id) REFERENCES Article(id),
FOREIGN KEY (account_id) REFERENCES Account(id));

CREATE TABLE Article_Author (article_id INT NOT NULL, author_id INT NOT NULL,
FOREIGN KEY (article_id) REFERENCES Article(id),
FOREIGN KEY (author_id) REFERENCES Author(id));

CREATE TABLE Article_Tag (article_id INT NOT NULL, tag_id INT NOT NULL,
FOREIGN KEY(article_id) REFERENCES Article(id), FOREIGN KEY (tag_id) REFERENCES Tag(id));

CREATE SEQUENCE article_autoincrement_seq START WITH 1 INCREMENT BY 1 NOMAXVALUE;
CREATE OR REPLACE FUNCTION FORM_MAIN_PHOTO_NAME(ID IN ARTICLE.ID%TYPE) RETURN ARTICLE.MAIN_PHOTO%TYPE
IS
  MAIN_PHOTO_NAME ARTICLE.MAIN_PHOTO%TYPE;
BEGIN
  MAIN_PHOTO_NAME:=CONCAT(TO_CHAR(ID), '.jpg');
  RETURN MAIN_PHOTO_NAME;
END FORM_MAIN_PHOTO_NAME;
create or replace trigger ARTICLE_ID_TRG BEFORE INSERT ON ARTICLE FOR EACH ROW
BEGIN
  IF :new.ID IS NULL THEN
    SELECT ARTICLE_AUTOINCREMENT_SEQ.NEXTVAL INTO :new.ID FROM DUAL;
  END IF;
  IF :new.MAIN_PHOTO IS NULL THEN
    SELECT FORM_MAIN_PHOTO_NAME(:new.ID) INTO :new.MAIN_PHOTO FROM DUAL;
  END IF;
end;

CREATE SEQUENCE author_autoincrement_seq START WITH 1 INCREMENT BY 1 NOMAXVALUE;
CREATE OR REPLACE TRIGGER AUTHOR_ID_TRG BEFORE INSERT ON AUTHOR FOR EACH ROW
BEGIN
  IF :new.ID IS NULL THEN
    SELECT AUTHOR_AUTOINCREMENT_SEQ.NEXTVAL INTO :new.ID FROM DUAL;
  END IF;
end;

CREATE SEQUENCE role_autoincrement_seq START WITH 1 INCREMENT BY 1 NOMAXVALUE;
CREATE OR REPLACE TRIGGER ROLE_ID_TRG BEFORE INSERT ON ROLE FOR EACH ROW
BEGIN
  IF :new.ID IS NULL THEN
    SELECT ROLE_AUTOINCREMENT_SEQ.NEXTVAL INTO :new.ID FROM DUAL;
  END IF;
end;

CREATE SEQUENCE account_autoincrement_seq START WITH 1 INCREMENT BY 1 NOMAXVALUE;
CREATE OR REPLACE TRIGGER ACCOUNT_INSERT_TRG BEFORE INSERT ON ACCOUNT FOR EACH ROW
BEGIN
  IF :new.ID IS NULL THEN
    SELECT ACCOUNT_AUTOINCREMENT_SEQ.NEXTVAL INTO :new.ID FROM DUAL;
  END IF;
  SELECT ROLE_TMP.ID INTO :new.ROLE_ID FROM (SELECT ID FROM ROLE WHERE ROLE_NAME='user') ROLE_TMP;
end;

CREATE SEQUENCE tag_autoincrement_seq START WITH 1 INCREMENT BY 1 NOMAXVALUE;
CREATE OR REPLACE TRIGGER TAG_ID_TRG BEFORE INSERT ON TAG FOR EACH ROW
BEGIN
  IF :new.ID IS NULL THEN
    SELECT TAG_AUTOINCREMENT_SEQ.NEXTVAL INTO :new.ID FROM DUAL;
  END IF;
end;

CREATE SEQUENCE comment_autoincrement_seq START WITH 1 INCREMENT BY 1 NOMAXVALUE;
CREATE OR REPLACE TRIGGER COMMENT_ID_TRG BEFORE INSERT ON COMMENTS FOR EACH ROW
BEGIN
  IF :new.ID IS NULL THEN
    SELECT COMMENT_AUTOINCREMENT_SEQ.NEXTVAL INTO :new.ID FROM DUAL;
  END IF;
end;